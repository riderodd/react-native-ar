{"version":3,"sources":["index.tsx"],"names":["LINKING_ERROR","Platform","select","ios","default","ComponentName","ArViewerComponent","UIManager","getViewManagerConfig","Error","ArViewerView","Component","constructor","props","Map","state","cameraPermission","nativeRef","_onDataReturned","bind","_onError","event","result","error","nativeEvent","requestId","parseInt","promise","_requestMap","get","resolve","reject","delete","message","console","warn","takeScreenshot","_nextRequestId","requestMap","Promise","set","current","dispatchViewManagerCommand","Commands","reset","rotate","pitch","yaw","roll","rotateModel","render"],"mappings":"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","sourcesContent":["import React, { Component, createRef, RefObject, SyntheticEvent } from 'react';\r\nimport {\r\n  requireNativeComponent,\r\n  UIManager,\r\n  Platform,\r\n  ViewStyle,\r\n  findNodeHandle,\r\n  HostComponent,\r\n} from 'react-native';\r\n\r\nconst LINKING_ERROR =\r\n  `The package 'react-native-ar-viewer' doesn't seem to be linked. Make sure: \\n\\n` +\r\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\r\n  '- You rebuilt the app after installing the package\\n' +\r\n  '- You are not using Expo managed workflow\\n';\r\n\r\ntype ArEvent = SyntheticEvent<\r\n  {},\r\n  {\r\n    requestId: number | string;\r\n    result: string;\r\n    error: string;\r\n  }\r\n>;\r\ntype ArErrorEvent = SyntheticEvent<{}, { message: string }>;\r\ntype ArStatelessEvent = SyntheticEvent<{}, {}>;\r\n\r\ntype ArViewerProps = {\r\n  model: string;\r\n  planeOrientation?: 'none' | 'vertical' | 'horizontal' | 'both';\r\n  allowScale?: boolean;\r\n  allowRotate?: boolean;\r\n  allowTranslate?: boolean;\r\n  lightEstimation?: boolean;\r\n  manageDepth?: boolean;\r\n  disableInstructions?: boolean;\r\n  disableInstantPlacement?: boolean;\r\n  style?: ViewStyle;\r\n  ref?: RefObject<HostComponent<ArViewerProps> | (() => never)>;\r\n  onDataReturned: (e: ArEvent) => void;\r\n  onError?: (e: ArErrorEvent) => void | undefined;\r\n  onStarted?: (e: ArStatelessEvent) => void | undefined;\r\n  onEnded?: (e: ArStatelessEvent) => void | undefined;\r\n  onModelPlaced?: (e: ArStatelessEvent) => void | undefined;\r\n  onModelRemoved?: (e: ArStatelessEvent) => void | undefined;\r\n};\r\n\r\ntype UIManagerArViewer = {\r\n  Commands: {\r\n    takeScreenshot: number;\r\n    reset: number;\r\n    rotateModel: number;\r\n  };\r\n};\r\n\r\ntype ArViewUIManager = UIManager & {\r\n  ArViewerView: UIManagerArViewer;\r\n};\r\n\r\ntype ArInnerViewProps = Omit<\r\n  ArViewerProps,\r\n  'onDataReturned' | 'ref' | 'onError'\r\n>;\r\n\r\ntype ArInnerViewState = {\r\n  cameraPermission: boolean;\r\n};\r\n\r\nconst ComponentName = 'ArViewerView';\r\n\r\nconst ArViewerComponent =\r\n  UIManager.getViewManagerConfig(ComponentName) != null\r\n    ? requireNativeComponent<ArViewerProps>(ComponentName)\r\n    : () => {\r\n        throw new Error(LINKING_ERROR);\r\n      };\r\n\r\nexport class ArViewerView extends Component<\r\n  ArInnerViewProps,\r\n  ArInnerViewState\r\n> {\r\n  // We need to keep track of all running requests, so we store a counter.\r\n  private _nextRequestId = 1;\r\n  // We also need to keep track of all the promises we created so we can\r\n  // resolve them later.\r\n  private _requestMap = new Map<\r\n    number,\r\n    {\r\n      resolve: (result: string) => void;\r\n      reject: (result: string) => void;\r\n    }\r\n  >();\r\n  // Add a ref to the native view component\r\n  private nativeRef: RefObject<HostComponent<ArViewerProps> | (() => never)>;\r\n\r\n  constructor(props: ArInnerViewProps) {\r\n    super(props);\r\n    this.state = {\r\n      cameraPermission: true,\r\n    };\r\n    this.nativeRef = createRef<typeof ArViewerComponent>();\r\n    // bind methods to current context\r\n    this._onDataReturned = this._onDataReturned.bind(this);\r\n    this._onError = this._onError.bind(this);\r\n  }\r\n\r\n  _onDataReturned(event: ArEvent) {\r\n    // We grab the relevant data out of our event.\r\n    const { result, error } = event.nativeEvent;\r\n    const requestId = parseInt(event.nativeEvent.requestId as string, 10);\r\n    // Then we get the promise we saved earlier for the given request ID.\r\n    const promise = this._requestMap.get(requestId);\r\n    if (promise) {\r\n      if (result) {\r\n        // If it was successful, we resolve the promise.\r\n        promise.resolve(result);\r\n      } else {\r\n        // Otherwise, we reject it.\r\n        promise.reject(error);\r\n      }\r\n      // Finally, we clean up our request map.\r\n      this._requestMap.delete(requestId);\r\n    }\r\n  }\r\n\r\n  _onError(event: ArErrorEvent) {\r\n    // We grab the relevant data out of our event.\r\n    const { message } = event.nativeEvent;\r\n    console.warn(message);\r\n  }\r\n\r\n  /**\r\n   * Takes a full screenshot of the rendered camera\r\n   * @returns A promise resolving a base64 encoded image\r\n   */\r\n  takeScreenshot() {\r\n    // Grab a new request ID and our request map.\r\n    let requestId = this._nextRequestId++;\r\n    let requestMap = this._requestMap;\r\n\r\n    // We create a promise here that will be resolved once `_onRequestDone` is\r\n    // called.\r\n    let promise = new Promise<string>(function (resolve, reject) {\r\n      requestMap.set(requestId, { resolve: resolve, reject: reject });\r\n    });\r\n\r\n    // Now just dispatch the command as before, adding the request ID to the\r\n    // parameters.\r\n    this.nativeRef.current &&\r\n      UIManager.dispatchViewManagerCommand(\r\n        findNodeHandle(this.nativeRef.current as unknown as number),\r\n        (UIManager as ArViewUIManager)[ComponentName].Commands.takeScreenshot,\r\n        [requestId]\r\n      );\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * Reset the model positionning\r\n   * @returns void\r\n   */\r\n  reset() {\r\n    this.nativeRef.current &&\r\n      UIManager.dispatchViewManagerCommand(\r\n        findNodeHandle(this.nativeRef.current as unknown as number),\r\n        (UIManager as ArViewUIManager)[ComponentName].Commands.reset,\r\n        []\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Rotate the model\r\n   * @returns void\r\n   */\r\n  rotate(pitch: number, yaw: number, roll: number) {\r\n    this.nativeRef.current &&\r\n      UIManager.dispatchViewManagerCommand(\r\n        findNodeHandle(this.nativeRef.current as unknown as number),\r\n        (UIManager as ArViewUIManager)[ComponentName].Commands.rotateModel,\r\n        [pitch, yaw, roll]\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.state.cameraPermission && (\r\n        <ArViewerComponent\r\n          ref={this.nativeRef}\r\n          onDataReturned={this._onDataReturned}\r\n          onError={this._onError}\r\n          {...this.props}\r\n        />\r\n      )\r\n    );\r\n  }\r\n}\r\n"]}